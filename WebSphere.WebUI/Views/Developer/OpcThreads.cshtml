@{
    ViewBag.Title = "Web Telemetry System «WebSphere»";
    Layout = "~/Views/Shared/_Layout.cshtml";
}  <!-- Styles -->
<link rel="stylesheet" type='text/css' href='/Content/_CSS/main.css' />
<link type="text/css" rel="stylesheet" href="/Content/_CSS/Developer/Index.css" />
<!-- 
    <link rel="stylesheet" type='text/css' href='/Content/_CSS/jqueryUI Theme/jquery-ui-1.10.4.custom.css' />
    END -->
<!-- Scripts -->
<script type="text/javascript" src="/Scripts/jquery-1.10.2.min.js"></script>
<script type="text/javascript" src="/Scripts/_JS/main.js"></script>  

<style>
    .eButton {
        display: block;
        width: 200px;
        height: 30px;
        text-align: center;
        padding: 5px;
        margin: 10px;
        cursor: pointer;
        background-color: #88f;
        color: #fff;
        white-space: nowrap;
    }

        .eButton:hover {
            background-color: #66e;
        }
</style>
<!--<input type="button" onclick=UpdateThreadsStates() value="update"/>-->
<div id="threadStateTableId"></div>

<div onclick=WriteTag() class="eButton">
    <span> Write</span>
</div> 
<script type="text/javascript">
    CreateOpcStateTable("threadStateTableId");
    CreateThreadStateTable("threadStateTableId");
    var threadStateTableElement;
    var opcStateTableElement;

    setInterval(function () {
        UpdateOPCsStates();
        UpdateThreadsStates();
    }, 1000);
    function CreateThreadStateTable(parentId) {
        var parentElement = document.getElementById(parentId);
        if (parentElement == null)
            return;
        threadStateTableElement = document.createElement("table");
        threadStateTableElement.className = "tagsTable";
        parentElement.appendChild(threadStateTableElement);
    }
    function CreateOpcStateTable(parentId) {
        var parentElement = document.getElementById(parentId);
        if (parentElement == null)
            return;
        opcStateTableElement = document.createElement("table");
        opcStateTableElement.className = "tagsTable";
        parentElement.appendChild(opcStateTableElement);
    }
 
    function ClearThreadStateTable () {
        if (threadStateTableElement == null)
            return;
        while (threadStateTableElement.firstChild)
            threadStateTableElement.removeChild(threadStateTableElement.firstChild);
    }
    function ClearOpcStateTable() {
        if (opcStateTableElement == null)
            return;
        while (opcStateTableElement.firstChild)
            opcStateTableElement.removeChild(opcStateTableElement.firstChild);
    }

    function AddThreadStateTableItemHeader(opc, tag,value, time,qual) {
        if (threadStateTableElement == null)
            return;
        var row = threadStateTableElement.insertRow();
        var cell = row.insertCell(0); cell.className = "tagsTableCell"; cell.innerHTML = opc; cell.style.width = "70px";
        cell = row.insertCell(1); cell.className = "tagsTableCell"; cell.innerHTML = tag; cell.style.width = "100px";
        cell = row.insertCell(2); cell.className = "tagsTableCell"; cell.innerHTML = value; cell.style.width = "100px";
        cell = row.insertCell(3); cell.className = "tagsTableCell"; cell.innerHTML = time; cell.style.width = "100px";
        cell = row.insertCell(4); cell.className = "tagsTableCell"; cell.innerHTML = qual; cell.style.width = "100px";
        
    }
    function AddOpcStateTableItemHeader(id, name, connstring, tagsCount, connected,start,stop,rest) {
        if (opcStateTableElement == null)
            return; 
        var row = opcStateTableElement.insertRow();
        var cell = row.insertCell(0); cell.className = "tagsTableCell"; cell.innerHTML = id; cell.style.width = "70px";
        cell = row.insertCell(1); cell.className = "tagsTableCell"; cell.innerHTML = name; cell.style.width = "100px";
        cell = row.insertCell(2); cell.className = "tagsTableCell"; cell.innerHTML = connstring; cell.style.width = "100px";
        cell = row.insertCell(3); cell.className = "tagsTableCell"; cell.innerHTML = tagsCount; cell.style.width = "100px";
        cell = row.insertCell(4); cell.className = "tagsTableCell"; cell.innerHTML = connected; cell.style.width = "100px";

        cell = row.insertCell(5); cell.className = "tagsTableCell"; cell.innerHTML = start; cell.style.width = "100px";
        cell = row.insertCell(6); cell.className = "tagsTableCell"; cell.innerHTML = stop; cell.style.width = "100px";
        cell = row.insertCell(7); cell.className = "tagsTableCell"; cell.innerHTML = rest; cell.style.width = "100px";

    }

    function AddThreadStateTableItem(opc, tag, value, time, qual) {
        if (threadStateTableElement == null)
            return;
        var row = threadStateTableElement.insertRow();
        var cell = row.insertCell(0); cell.className = "tagsTableCell"; cell.innerHTML = opc;
        cell = row.insertCell(1); cell.className = "tagsTableCell"; cell.innerHTML = tag;
        cell = row.insertCell(2); cell.className = "tagsTableCell"; cell.innerHTML = value;
        cell = row.insertCell(3); cell.className = "tagsTableCell"; cell.innerHTML = time;
        cell = row.insertCell(4); cell.className = "tagsTableCell"; cell.innerHTML = qual;

    }
    function AddOpcStateTableItem(id, name, connstring, tagsCount, connected) {
        if (opcStateTableElement == null)
            return;
        var row = opcStateTableElement.insertRow();
        var cell = row.insertCell(0); cell.className = "tagsTableCell"; cell.innerHTML = id;
        cell = row.insertCell(1); cell.className = "tagsTableCell"; cell.innerHTML = name;
        cell = row.insertCell(2); cell.className = "tagsTableCell"; cell.innerHTML = connstring;
        cell = row.insertCell(3); cell.className = "tagsTableCell"; cell.innerHTML = tagsCount;
        cell = row.insertCell(4); cell.className = "tagsTableCell"; cell.innerHTML = connected;

        cell = row.insertCell(5); cell.className = "  tagsTableCell";
        var div = document.createElement("div");
        div.className = "eButton";
        div.innerHTML = "Start";
        div.setAttribute("onclick", "OpcState(1,'" + id + "')");
        cell.appendChild(div);

        cell = row.insertCell(6); cell.className = "  tagsTableCell"; 
          div = document.createElement("div");
          div.className = "eButton";
          div.innerHTML = "Stop";
          div.setAttribute("onclick", "OpcState(0,'" + id + "')");
        cell.appendChild(div);

        cell = row.insertCell(7); cell.className = "  tagsTableCell"; 
          div = document.createElement("div");
          div.className = "eButton";
          div.innerHTML = "Restart";
          div.setAttribute("onclick", "OpcState(3,'" + id + "')");
        cell.appendChild(div);

    }
 
    function UpdateThreadsStates() {
        $.ajax({ type: "POST", url: "/Opc/GetAllOpcTagsValues", async: false, success: after_UpdateThreadsStates });
        //$.ajax({ type: "POST", url: "/Opc/GetAllOpcTagsValues", async: false, success: after_UpdateOpcStates });
        //$.ajax({ type: "POST", url: "/api/developer/GetThreadsStates", async: true, success: after_UpdateThreadsStates2 });
    }
    function UpdateOPCsStates() {
        $.ajax({ type: "POST", url: "/Opc/GetOpcInfo", async: false, success: after_UpdateOpcStates });
        //$.ajax({ type: "POST", url: "/api/developer/GetOpcServersInfo", async: true, success: after_UpdateThreadsStates2 });
    }
     
    function OpcState(cmd, pollerId) {

        $.ajax({
            type: "POST", url: "/Opc/ServerChangeState", async:
                false, data: { cmd: cmd, pollerId: pollerId }, success: after_WriteTag
        }); 
    }

    function after_WriteTag(data) { alert(data); }

    function after_UpdateThreadsStates(data) {
        ClearThreadStateTable();
        AddThreadStateTableItemHeader(
            "Opc",
            "Tag",
            "Value",
            "Time"
            );
        for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {
            AddThreadStateTableItem(
                data[dataIndex].Tag.PollerId,
                data[dataIndex].Tag.TagName,
                data[dataIndex].LastValue,
                data[dataIndex].LastLogged,
                data[dataIndex].Quality
                );
        }
    }

    function after_UpdateOpcStates(data) {
        ClearOpcStateTable();
        AddOpcStateTableItemHeader(
            "Id",
            "Name",
            "ConnString",
            "TagsCount",
            "Connected",
            "Start",
            "Stop",
            "Restart"
            );
        for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {
            AddOpcStateTableItem(
                data[dataIndex].Id,
                data[dataIndex].ConnString,
                data[dataIndex].ConnString,
                data[dataIndex].Tags,
                data[dataIndex].Connected,
                data[dataIndex].Connected,
                data[dataIndex].Connected,
                data[dataIndex].Connected
                );
        }
    }
    
</script>
