@{
    ViewBag.Title = "Web Telemetry System «WebSphere»";
    Layout = "~/Views/Shared/_Layout.cshtml";
}   <!-- Scripts -->
<link href="~/Content/_CSS/Reports/zerozam.css" rel="stylesheet" /> 
<script type="text/javascript" src="~/Scripts/_JS/common/OpcReadWrite.js"></script> 
<script type="text/javascript" src="~/Scripts/_JS/AdditionalFunctions.js"></script>
<script type="text/javascript" src="~/Scripts/_JS/SVGFunctions.js"></script>
<script type="text/javascript" src="~/Scripts/_JS/jquery/jquery-1.11.0.min.js"></script> 
<script type="text/javascript" src="~/Scripts/_JS/common/MyTime.js"></script>
<script type="text/javascript" src="~/Scripts/_JS/main.js"></script>
<script type="text/javascript" src="~/Scripts/snap/snap.svg.js"></script>

 
    <object id='svg' data="~/Content/_Img/_svg/pk.svg" type="image/svg+xml" width="100%" height="80%"></object>
 
 

<script type="text/javascript">

    var GM_OPC_TAGS = new Array(),
        GM_OPC_VALS,
        ControlPanelTagsName = null,
        OBJ_I = 0,
        DHS = "---",
        tags = new Array();
    /*
    function PrepareTags() {

        for (var i = 0; i < tags.length; i++) {

            switch (tags[i].type) {

                // тревоги
                case "ekAlarmLevel":
                    GM_OPC_TAGS.push(tags[i].tag + "HiAlarmLevel");
                    GM_OPC_TAGS.push(tags[i].tag + "HiWorkLevel");
                    GM_OPC_TAGS.push(tags[i].tag + "LowAlarmLevel");
                    break;

                // насос
                case "ekPump":
                    GM_OPC_TAGS.push(tags[i].tag + "Pump_On");
                    GM_OPC_TAGS.push(tags[i].tag + "Pump_Power");
                    GM_OPC_TAGS.push(tags[i].tag + "AutoMan");
                    break;

                default:
                    GM_OPC_TAGS.push(tags[i].tag);
            }

        }
    }
    */
    function RequestOPC(id) {
        var a = {};
        for (var i = 0; i < GM_OPC_TAGS.length; i++) a[i] = GM_OPC_TAGS[i]; 
        $.ajax({
            type: "POST",
            url: "/api/Opc/GetOpcTagsVals",
            data: { Tags: a, TagsCount: GM_OPC_TAGS.length, Sender: id },
            async: true,
            success: s_RequestOPC,
            error: e_RequestOPC
        });
    }

    function s_RequestOPC(data) {
        GM_OPC_VALS = new Array();
        for (var i = 0; i < data.length; i++) {
            if (data[i].OpcVals != null) {
                GM_OPC_VALS[data[i].Tag] = data[i].OpcVals.LastValue;
            } else {
                GM_OPC_VALS[data[i].Tag] = null;
            }
        }
        UpdateMnemo();
    }

    function e_RequestOPC() { ErrMessage("Не удалось получить значения OPC тегов."); }

 

    function update_textbox(svg,object) {
        var val = Fixed(parseFloat(object.LastValue),1);
        if (!isNaN(val))
            svg.textContent = val; //SetInnerTextSVG(object.Tag.TagName, val);
        else svg.textContent = DHS; //SetInnerTextSVG(object.Tag.TagName, DHS);
        svg.setAttribute("onmouseover", "top.OkMessage('" + object.Tag.TagName.toString() + "';'" + object.LastLogged.toString() + "')");
    }
    function update_image(svg, object) {

        var val = object.LastValue;
        if (val>50)
            svg.setAttribute("visibility", "hidden");
        else
            svg.setAttribute("visibility", "visible");
    }  
    function update_tempState(svgElement, object) {
        var val = parseInt(parseFloat(object.LastValue)%3);
        if (val == 0) {
            svgElement.setAttribute("fill", "#FFFF00"); 
        }
        else if (val == 1)
        { svgElement.setAttribute("fill", "#FF0000"); }
        else  
        { svgElement.setAttribute("fill", "#00FF00"); }

    }
    function update_tempText(svgElement, object) {
        var val = Fixed(parseFloat(object.LastValue),2);
        svgElement.textContent = val; 
    }

    function update_pressState(svgElement, object) {
        var val = parseInt(parseFloat(object.LastValue) % 3);
        if (val == 0) {
            svgElement.setAttribute("fill", "#FFFF00");
        }
        else if (val == 1)
        { svgElement.setAttribute("fill", "#FF0000"); }
        else
        { svgElement.setAttribute("fill", "#00FF00"); }

    }
    function update_pressText(svgElement, object) {
        var val = Fixed(parseFloat(object.LastValue), 1);
        svgElement.textContent = val;
    }

    function state(id, st) {

        var parent = getSVGById(id);

        var child1 = parent.childNodes[1];
        var child3 = parent.childNodes[3]; 
        if (st == 1) { 
            child1.setAttribute("fill", "green");
            child3.setAttribute("fill", "green");
        }
        else if (st == 2) {
            child1.setAttribute("fill", "yellow");
            child3.setAttribute("fill", "yellow");
        }
        else if (st == 3) {
            child1.animate("fill",1, mina("yellow","red"));
            child3.setAttribute("fill", "yellow");
        }
    }

    function opening(id) {

        var svg = Snap('#svg');
        var group = svg.select(id);
        var states = [{ fill: '#0f0' }, { fill: '#000' }];
        function animateOpen(el, i) {
            el.animate(states[i], 350, function () { animateOpen(el, ++i in states ? i : 0); });
        }
        var right = svg.select("#" + group.node.childNodes[0].id);
        var left = svg.select("#" + group.node.childNodes[1].id);
        animateOpen(right, 0);
        animateOpen(left, 0);
    }
    function closing(id) {

        var svg = Snap('#svg');
        var group = svg.select(id);
        var states = [{ fill: '#ff0' }, { fill: '#000' }];
        function animateOpen(el, i) {
            el.animate(states[i], 350, function () { animateOpen(el, ++i in states ? i : 0); });
        }
        var right = svg.select("#" + group.node.childNodes[0].id);
        var left = svg.select("#" + group.node.childNodes[1].id);
        animateOpen(right, 0);
        animateOpen(left, 0);
    }
    function alarm(id) {

        var svg = Snap('#svg');
        var group = svg.select(id);
        var states = [{ fill: '#f00' }, { fill: '#0f0' }];
        function animateOpen(el, i) {
            el.animate(states[i], 350, function () { animateOpen(el, ++i in states ? i : 0); });
        }
        var right = svg.select("#" + group.node.childNodes[0].id);
        var left = svg.select("#" + group.node.childNodes[1].id);
        animateOpen(right, 0);
        animateOpen(left, 0);
    }

    function getElementsByAttribute(attribute, context) {

        var svg = Snap('#svg');
        //var group = element.select("#" + element.node.getElementsByClassName("gStateAlarm")[0].id);
        var nodeList = svg.node.getElementsByTagName('*');
        var nodeArray = [];
        var iterator = 0;
        var node = null;

        while (node = nodeList[iterator++]) {
            if (node.getAttribute(attribute)) nodeArray.push(node);
        }

        return nodeArray;
    }

    window.addEventListener("load", function () {
        
        var datatag = getElementsByAttribute('data-tag', 'svg');

        for (var i = 0; i < datatag.length; i++) {
            var el = {};
            el.tag = datatag[i].getAttribute('data-tag');
            el.type = datatag[i].getAttribute('data-type');
            el.id = datatag[i].id;
            if (tags.includes(el))
                alert(tag);
            else {
                tags.push(el);
            }
        }
        
        PrepareTags(tags);
        RequestOPC(OBJ_I);

        setInterval(function () {
            RequestOPC(OBJ_I);
        }, 2000);
    });
 
    function UpdateMnemo() {
        UpdateTags();
        /*
        for (var i = 0; i < tags.length; i++) {
            switch (tags[i].type) {

                // тревоги
                case "ekAlarmLevel":
                    animateEK_AlarmLevel(tags[i].id, tags[i].tag);
                    break;

                // насос
                case "ekPump":
                    animateEK_Pump(tags[i].id, tags[i].tag);
                    break;

                case "analog":
                    SetText(tags[i].id, ProcFl(GM_OPC_VALS[tags[i].tag], 2), 1);
                    break;

                case "visible":
                    SetVis(tags[i].id, ParseToBool(GM_OPC_VALS[tags[i].tag]));
                    break;
                case "gasan":
                    SetTextGasAn(tags[i].id, ProcFl(GM_OPC_VALS[tags[i].tag], 2));
                    break;

                default:
                    SetText(tags[i].id, ProcFl(GM_OPC_VALS[tags[i].tag], 2), 1);
                    break;
            }
        }
        */

        if (ControlPanelTagsName != null)
            animateEK_Pump("ControlPanel", ControlPanelTagsName);
    }



    //function showEK_Pump(id, pumpOn, pumpPower, autoMan) {
    //    var state = 0,
    //        svg = Snap('#svg'),
    //        element = svg.select(id),
    //        group = '',
    //        statesColor = ['on', 'off'],
    //        statesText = ['Включен', 'Выключен'],
    //        list = '';

    //    // pumpOn
    //    !pumpOn ? state = 1 : '';

    //    list = element.node.getElementsByClassName("stateColor");
    //    for (var i = 0, len = list.length; i < len; i++) {
    //        list[i].classList = 'stateColor ' + statesColor[state];
    //    }
    //    group = element.select("#" + element.node.getElementsByClassName("gPump_On")[0].id);
    //    list = group.node.getElementsByClassName("stateText");
    //    for (var i = 0, len = list.length; i < len; i++) {
    //        list[i].innerHTML = statesText[state];
    //    }

    //    // pumpPower
    //    state = 0;
    //    !pumpPower ? state = 1 : '';

    //    group = element.select("#" + element.node.getElementsByClassName("gPump_Power")[0].id);
    //    list = group.node.getElementsByClassName("stateColor");
    //    for (var i = 0, len = list.length; i < len; i++) {
    //        list[i].classList = 'stateColor ' + statesColor[state];
    //    }

    //    // autoMan
    //    state = 0;
    //    !autoMan ? state = 1 : '';
    //    autoMan ? state = 2 : '';

    //    statesColor = ['unk', 'local', 'remote'];
    //    statesText = ['?', 'М', 'Д'];

    //    group = element.select("#" + element.node.getElementsByClassName("gAutoMan")[0].id);
    //    list = group.node.getElementsByClassName("stateColor");
    //    for (var i = 0, len = list.length; i < len; i++) {
    //        list[i].classList = 'stateColor ' + statesColor[state];
    //    }
    //    list = group.node.getElementsByClassName("stateText");
    //    for (var i = 0, len = list.length; i < len; i++) {
    //        list[i].innerHTML = statesText[state];
    //    }
    //}

    function showPanell(st, dispname, tagname) {
        var svg = Snap('#svg');
        var el = svg.select("#ControlPanel");
        var states = ['none', 'block'];
        if (st == 0) {
            el.attr("display", states[0]);
            ControlPanelTagsName = null;
        } else {
            el.attr("display", states[1]);
            if (arguments.length > 2) {
                var gname = el.select("#gName");
                gname.node.innerHTML = dispname;
                ControlPanelTagsName = tagname;
                AnimateControlPanell(tagname);
            }
        }
    }

    function cmdPanell(cmd) { 
        var   tag,val=true;  
        if (cmd == 0)
            tag = ControlPanelTagsName + "Stop";
        else if (cmd == 1)
            tag = ControlPanelTagsName + "Start";
        else
        {
            tag = ControlPanelTagsName + "AutoMan";
            if (ParseToBool(GM_OPC_VALS[ControlPanelTagsName + "AutoMan"]))
                val = false; 
        }

        if (OpcWrite(tag, val)) OkMessage("Команда обработана");
        else ErrMessage("Команда не обработана");
    }
    function AnimateControlPanell(tagsname) {
        var pumpOn = ParseToBool(GM_OPC_VALS[tagsname + "Pump_On"]),
            pumpPower = ParseToBool(GM_OPC_VALS[tagsname + "Pump_Power"]),
            autoMan = ParseToBool(GM_OPC_VALS[tagsname + "AutoMan"]);
        animateEK_Pump("ControlPanel", tagsname);
    }

</script>
 