@{
    ViewBag.Title = "Web Telemetry System «WebSphere»";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Content/_CSS/Reports/zerozam.css" rel="stylesheet" />
<link href="~/Content/_CSS/Mnemo/MnemoSingle.css" rel="stylesheet" /> 
<script type="text/javascript" src="~/Scripts/_JS/common/OpcReadWrite.js"></script> 
<script type="text/javascript" src="~/Scripts/_JS/AdditionalFunctions.js"></script>
<script type="text/javascript" src="~/Scripts/_JS/SVGFunctions.js"></script>
<script type="text/javascript" src="~/Scripts/_JS/jquery/jquery-1.11.0.min.js"></script> 
<script type="text/javascript" src="~/Scripts/_JS/common/MyTime.js"></script>
<script type="text/javascript" src="~/Scripts/_JS/main.js"></script>
<script type="text/javascript" src="~/Scripts/_JS/SVGFunctions.js"></script>
<script type="text/javascript" src="~/Scripts/snap/snap.svg.js"></script> 
  
<object id="svg" data="~/Content/_Img/_svg/Meteli2.svg" type="image/svg+xml" width="100%" height="80%"></object>
 
<script type="text/javascript">

    var GM_OPC_TAGS = new Array(),
        GM_OPC_VALS,
        ControlPanelTagsName = null,
        OBJ_I = 0,
        DHS = "---",
        tags = new Array();


    /* REQUEST OPC UPDATE */
    function RequestOPC(id) {
        var a = {}; for (var i = 0; i < GM_OPC_TAGS.length; i++) a[i] = GM_OPC_TAGS[i];
        $.ajax({
            type: "POST",
            url: "/api/Opc/GetOpcTagsVals",
            data: { Tags: a, TagsCount: GM_OPC_TAGS.length, Sender: id },
            async: true,
            success: s_RequestOPC,
            error: e_RequestOPC
        });
    }

    function s_RequestOPC(data) {
        GM_OPC_VALS = new Array();
        for (var i = 0; i < data.length; i++)
            if (data[i].OpcVals != null)
                GM_OPC_VALS[data[i].Tag] = data[i].OpcVals.LastValue;
            else GM_OPC_VALS[data[i].Tag] = null;
        UpdateMnemo();
    }  
      
    function update_textbox(svg,object) {
        var val = Fixed(parseFloat(object.LastValue),1);
        if (!isNaN(val))
            svg.textContent = val; //SetInnerTextSVG(object.Tag.TagName, val);
        else svg.textContent = DHS; //SetInnerTextSVG(object.Tag.TagName, DHS);
        svg.setAttribute("onmouseover", "top.OkMessage('" + object.Tag.TagName.toString() + "';'" + object.LastLogged.toString() + "')");
    }

    function update_image(svg, object) {
        var val = object.LastValue;
        if (val > 50) {
            svg.setAttribute("visibility", "hidden");
        } else {
            svg.setAttribute("visibility", "visible");
        }
    } 

    function update_gasState(svgElement, object) {
        var val = parseInt(parseFloat(object.LastValue) % 3);
        if (val == 0) {
            svgElement.setAttribute("fill", "#FFFF00");
        }
        else if (val == 1) {
            svgElement.setAttribute("fill", "#FF0000");
        }
        else {
            svgElement.setAttribute("fill", "#00FF00");
        }
    }

    function update_gasText(svgElement, object) {
        var val = parseInt(parseFloat(object.LastValue) % 3);
        if (val == 0) {
            svgElement.textContent = ">20";
        }
        else if (val == 1) {
            svgElement.textContent = ">50";
        }
        else {
            svgElement.textContent = "<20";
        }
    }
     
    function update_tempState(svgElement, object) {
        var val = parseInt(parseFloat(object.LastValue)%3);
        if (val == 0) {
            svgElement.setAttribute("fill", "#FFFF00"); 
        }
        else if (val == 1) {
            svgElement.setAttribute("fill", "#FF0000");
        }
        else {
            svgElement.setAttribute("fill", "#00FF00");
        }
    }

    function update_tempText(svgElement, object) {
        var val = Fixed(parseFloat(object.LastValue),2);
        svgElement.textContent = val; 
    }

    function update_pressState(svgElement, object) {
        var val = parseInt(parseFloat(object.LastValue) % 3);
        if (val == 0) {
            svgElement.setAttribute("fill", "#FFFF00");
        }
        else if (val == 1)
        { svgElement.setAttribute("fill", "#FF0000"); }
        else
        { svgElement.setAttribute("fill", "#00FF00"); }

    }

    function update_pressText(svgElement, object) {
        var val = Fixed(parseFloat(object.LastValue), 1);
        svgElement.textContent = val;
    }

    function e_RequestOPC() {
        ErrMessage("Не удалось получить значения OPC тегов.");
    }

    function state(id, st) {

        var parent = getSVGById(id);

        var child1 = parent.childNodes[1];
        var child3 = parent.childNodes[3]; 
        if (st == 1) { 
            child1.setAttribute("fill", "green");
            child3.setAttribute("fill", "green");
        }
        else if (st == 2) {
            child1.setAttribute("fill", "yellow");
            child3.setAttribute("fill", "yellow");
        }
        else if (st == 3) {
            child1.animate("fill",1, mina("yellow","red"));
            child3.setAttribute("fill", "yellow");
        }
    }

    function opening(id) {

        var svg = Snap('#svg');
        var group = svg.select(id);
        var states = [{ fill: '#0f0' }, { fill: '#000' }];
        function animateOpen(el, i) {
            el.animate(states[i], 350, function () { animateOpen(el, ++i in states ? i : 0); });
        }
        var right = svg.select("#" + group.node.childNodes[0].id);
        var left = svg.select("#" + group.node.childNodes[1].id);
        animateOpen(right, 0);
        animateOpen(left, 0);
    }

    function closing(id) {

        var svg = Snap('#svg');
        var group = svg.select(id);
        var states = [{ fill: '#ff0' }, { fill: '#000' }];
        function animateOpen(el, i) {
            el.animate(states[i], 350, function () { animateOpen(el, ++i in states ? i : 0); });
        }
        var right = svg.select("#" + group.node.childNodes[0].id);
        var left = svg.select("#" + group.node.childNodes[1].id);
        animateOpen(right, 0);
        animateOpen(left, 0);
    }

    function alarm(id) {

        var svg = Snap('#svg');
        var group = svg.select(id);
        var states = [{ fill: '#f00' }, { fill: '#0f0' }];
        function animateOpen(el, i) {
            el.animate(states[i], 350, function () { animateOpen(el, ++i in states ? i : 0); });
        }
        var right = svg.select("#" + group.node.childNodes[0].id);
        var left = svg.select("#" + group.node.childNodes[1].id);
        animateOpen(right, 0);
        animateOpen(left, 0);
    }

    // получение элемента по атрибутам
    function getElementsByAttribute(attribute, context) {

        var svg = Snap('#svg');
        var nodeList = svg.node.getElementsByTagName('*');
        var nodeArray = [];
        var iterator = 0;
        var node = null;

        while (node = nodeList[iterator++]) {
            if (node.getAttribute(attribute)) nodeArray.push(node);
        }

        return nodeArray;
    }

    // загрузка svg - файла
    window.addEventListener("load", function () {

        var datatag = getElementsByAttribute('data-tag', 'svg');

        for (var i = 0; i < datatag.length; i++) {

            var el = {};

            el.tag = datatag[i].getAttribute('data-tag');
            el.type = datatag[i].getAttribute('data-type');
            el.id = datatag[i].id;

            if (tags.includes(el)) {
                alert(tag);
            } else {
                tags.push(el);
            }
        }

        PrepareTags();
        RequestOPC(OBJ_I);

        setInterval(function () {
            RequestOPC(OBJ_I);
        }, 2000);

    });
     

    function UpdateMnemo() {

        UpdateTags();
       /* for (var i = 0; i < tags.length; i++) {
            switch (tags[i].type) {

                // тревоги
                case "ekAlarmLevel":
                    animateEK_AlarmLevel(tags[i].id, tags[i].tag);
                    break;
                
                // насос
                case "ekPump":
                    animateEK_Pump(tags[i].id, tags[i].tag);
                    break;

                // задвижка
                case "valve":
                    animateZD(tags[i].id, tags[i].tag);
                    break;

                case "analog":
                    SetText(tags[i].id, ProcFl(GM_OPC_VALS[tags[i].tag], 2), 1);
                    break;

                case "visible":
                    SetVis(tags[i].id, ParseToBool(GM_OPC_VALS[tags[i].tag]));
                    break;

                default:
                    SetText(tags[i].id, ProcFl(GM_OPC_VALS[tags[i].tag], 2), 1);
                    break;
            }
        }*/
         
     

	}

    function openWindow(id) {
        switch (id) {  
        case 1:
            window.open('/Mnemo/Mnemo/?mnemo=pg_5', '_self');
            break;
        case 2:
            window.open('/Mnemo/Mnemo/?mnemo=mgbb', '_self');
            break;
        case 3:
            window.open('/Mnemo/Mnemo/?mnemo=puzg', '_self');
            break;
        case 4:
            window.open('/Mnemo/Mnemo/?mnemo=pk', '_self');
            break;
            default:
                window.open('/Mnemo/Mnemo/?mnemo=Meteli', '_self');
                break;
    }
        
    }
</script>
 